AWSTemplateFormatVersion: "2010-09-09"

Description: A Lambda CFN project stack.

Parameters:
  ProjectName:
    Type: String
    Description: Name for this project; e.g. downtime-notifier, dynamodb-scaler

  EnvironmentName:
    Type: String
    Description: Name for this environment; e.g. development, staging, production

  ScheduleExpression:
    Type: String
    Default: ""
    Description: How often to invoke the function (e.g. 'rate(24 hours)'), or empty string to skip creating a AWS::Events::Rule

  Runtime:
    Type: String
    Description: Runtime for the function; e.g. python2.7

  Timeout:
    Type: Number
    Description: Timeout for the function in seconds

  MemorySize:
    Type: Number
    Description: Memory for the function in MB

Conditions:
  HasSchedule:
    "Fn::Not":
      - "Fn::Equals":
          - { Ref: ScheduleExpression }
          - ""

Resources:
  LambdaFunction:
    Type: AWS::Lambda::Function
    Metadata:
      Comment:
        "Fn::Sub":
          "Function for ${ProjectName}-${EnvironmentName}"
    DependsOn: [ LambdaFunctionExecutionRole ]
    Properties:
      Code:
        ZipFile:
          "Fn::Sub": |
            import json
            import logging

            logging.basicConfig()
            logger = logging.getLogger(__name__)
            logger.setLevel(logging.INFO)

            def handler(event, context):
                logger.info('Event: ' + json.dumps(event))
                logger.info('Context: ' + str(dir(context)))
                return {'message': 'This is placeholder code! Replace me!'}

      Role: { "Fn::GetAtt": [ LambdaFunctionExecutionRole, Arn ] }
      Timeout: { Ref: Timeout }
      Handler: index.handler
      Runtime: { Ref: Runtime }
      MemorySize: { Ref: MemorySize }
      Environment:
        Variables:
          EnvironmentName: { Ref: EnvironmentName }
          ProjectName: { Ref: ProjectName }


  LambdaFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [ lambda.amazonaws.com ]
            Action:
              - sts:AssumeRole
          - Effect: Allow
            Principal:
              AWS:
                - "Fn::Join":
                  - ""
                  - - "arn:aws:iam::"
                    - { Ref: "AWS::AccountId" }
                    - ":"
                    - "root"
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: WriteLogsToCloudWatch
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
        - PolicyName: DescribeSGsForAccountId
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:DescribeSecurityGroups"
                Resource: "*"
        # # Unused - uncomment to enable ParameterStore lookups for the given namespaces.
        - PolicyName: "ParameterStore"
          PolicyDocument:
            Version: "2012-10-17"
            Id: "AllowParameterAccess"
            Statement:
              - Sid: "AllowUnencryptedParameters"
                Effect: "Allow"
                Action: "ssm:GetParameter"
                Resource:
                  - "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/shared/*"
                  - "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${EnvironmentName}/*"
                  - "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ProjectName}/shared/*"
                  - "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ProjectName}/${EnvironmentName}/*"
        #       - Sid: "AllowEncryptedParameters"
        #         Effect: "Allow"
        #         Action: "kms:Decrypt"
        #         Resource:
        #           - Fn::ImportValue:
        #             "Fn::Sub": "arn-to-key-to-authorize"

      # # Unused - uncomment to add an array of managed policies.
      # ManagedPolicyArns:
      #   - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess


  # Permits the events service to invoke the service.
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: HasSchedule
    Properties:
      Action: lambda:InvokeFunction
      SourceArn:
        "Fn::GetAtt": [ ScheduledRule, Arn ]
      FunctionName: { "Fn::GetAtt": [ LambdaFunction, Arn ] }
      Principal: events.amazonaws.com


  # The cron rule for the execution.
  ScheduledRule:
    Type: AWS::Events::Rule
    Condition: HasSchedule
    Properties:
      Description:
        "Fn::Sub":
          "Scheduled rule for ${ProjectName}-${EnvironmentName}"
      ScheduleExpression: { Ref : ScheduleExpression }
      State: ENABLED
      Targets:
        - Arn: { "Fn::GetAtt": [ LambdaFunction, Arn ] }
          Id: ScheduledRule

Outputs:
  LambdaFunction:
    Value: { Ref : LambdaFunction }
  LambdaFunctionARN:
    Value: { "Fn::GetAtt": [ LambdaFunction, Arn ] }
  LambdaFunctionExecutionRole:
    Value: { Ref : LambdaFunctionExecutionRole }
  LambdaFunctionExecutionRoleARN:
    Value: { "Fn::GetAtt": [ LambdaFunctionExecutionRole, Arn ] }
  SigninUrl:
    Value:
      "Fn::Sub": |
        https://signin.aws.amazon.com/switchrole?account=${AWS::AccountId}&roleName=${LambdaFunctionExecutionRole}&displayName=assumed-role
  TestCommand:
    Value:
      "Fn::Sub": |
        aws lambda invoke --function-name ${LambdaFunction} /tmp/${LambdaFunction}-output.txt; cat /tmp/${LambdaFunction}-output.txt
